name: CI - Docker Compose et Tests d'Intégration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 0 

    steps:
    - name: Checkout du code
      uses: actions/checkout@v3

    - name: Setup Java 21
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: 'maven'

    - name: Build des microservices (sans les tests)
      run: |
        echo "Build du microservice utilisateur..."
        cd Back/microService-utilisateur && ./mvnw package -DskipTests && cd -
        echo "Build du microservice patient..."
        cd Back/microService-patient && ./mvnw package -DskipTests && cd -
        echo "Build du microservice gateway..."
        cd gateway && ./mvnw package -DskipTests && cd -
        # Si vous avez d'autres microservices, ajoutez leurs builds ici

    - name: Vérifier les JARs générés
      run: |
        echo "Contenu de Back/microService-utilisateur/target :"
        ls -l Back/microService-utilisateur/target/*.jar || echo "JAR non trouvé pour utilisateur"
        echo "Contenu de Back/microService-patient/target :"
        ls -l Back/microService-patient/target/*.jar || echo "JAR non trouvé pour patient"
        echo "Contenu de gateway/target :"
        ls -l gateway/target/*.jar || echo "JAR non trouvé pour gateway"

    - name: Lancer les tests unitaires des microservices
      run: |
        echo "Exécution des tests unitaires du microservice utilisateur..."
        cd Back/microService-utilisateur && ./mvnw test && cd -

        echo "Exécution des tests unitaires du microservice patient..."
        cd Back/microService-patient && ./mvnw test && cd -

        echo "Exécution des tests unitaires de la gateway..."
        cd gateway && ./mvnw test && cd -
        # Si vous avez d'autres microservices, ajoutez leurs tests unitaires ici

    - name: Build & Run des conteneurs avec Docker Compose
      run: |
        echo "Démarrage des conteneurs Docker..."
        # Le -d détache les conteneurs du terminal, permettant au workflow de continuer
        docker compose -f docker-compose.yml up --build -d
        echo "Conteneurs démarrés, attente pour la disponibilité des services..."

    - name: Attendre que les services soient prêts (Health Checks)
      run: |
        # Attente pour api-patient
        until curl --fail http://localhost:8080/patient/actuator/health; do
          echo 'Attente de la disponibilité de api-patient...'
          sleep 5
        done
        echo 'api-patient est disponible.'

        # Attente pour api-utilisateur
        until curl --fail http://localhost:8080/utilisateur/actuator/health; do
          echo 'Attente de la disponibilité de api-utilisateur...'
          sleep 5
        done
        echo 'api-utilisateur est disponible.'

        # Attente pour la gateway elle-même
        until curl --fail http://localhost:8080/actuator/health; do
          echo 'Attente de la disponibilité de la gateway...'
          sleep 5
        done
        echo 'Gateway est disponible.'

        echo "Tous les services nécessaires sont démarrés et prêts."

    - name: Vérifier l'état des conteneurs Docker
      run: docker compose ps

    - name: Lancer les tests d'intégration des microservices
      run: |
        echo "Exécution des tests d'intégration du microservice utilisateur..."
        # Si ce service a des tests d'intégration (ex: *IT.java), mvnw verify les exécutera.
        cd Back/microService-utilisateur && ./mvnw verify && cd - 

        echo "Exécution des tests d'intégration du microservice patient..."
        cd Back/microService-patient && ./mvnw verify && cd - 

        echo "Exécution des tests d'intégration de la gateway..."
        cd gateway && ./mvnw verify && cd -
        # Si vous avez d'autres microservices, ajoutez leurs tests d'intégration ici

    - name: Arrêt des conteneurs Docker
      if: always()
      run: |
        echo "Arrêt des conteneurs Docker..."
        docker compose down